#include <iostream>
#include <stdlib.h>
#include <time.h>
#include "../include/algorithm.h"

using namespace std;

/******************************************************
 * In your algorithm, you can just use the the funcitons
 * listed by TA to get the board information.(functions 
 * 1. ~ 4. are listed in next block)
 * 
 * The STL library functions is not allowed to use.
******************************************************/

/*************************************************************************
 * 1. int board.get_orbs_num(int row_index, int col_index)
 * 2. int board.get_capacity(int row_index, int col_index)
 * 3. char board.get_cell_color(int row_index, int col_index)
 * 4. void board.print_current_board(int row_index, int col_index, int round)
 * 
 * 1. The function that return the number of orbs in cell(row, col)
 * 2. The function that return the orb capacity of the cell(row, col)
 * 3. The function that return the color fo the cell(row, col)
 * 4. The function that print out the current board statement
*************************************************************************/
struct node{
    int x,y;
};
struct my_stack{
    node array[1000];
    int pos = 0;
    void push(node x){
        array[pos++] = x;
    }
    node pop(){
        return array[--pos];
    }
};
struct my_array{
    int array[1000];
    int pos = 0;
};
void algorithm_A(Board board, Player player, int index[]){

    //////your algorithm design///////////
   
    int final_x = 0;
    int final_y = 0;
    Board o_b = board;
    if(board.get_orbs_num(0, 0) == 0){
        index[0] = 0;
        index[1] = 0;
    }
    else if(board.get_orbs_num(0, COL-1) == 0){
        index[0] = 0;
        index[1] = COL-1;
    }
    else if(board.get_orbs_num(ROW-1, 0) == 0){
        index[0] = ROW-1;
        index[1] = 0;
    }
    else if(board.get_orbs_num(ROW-1, COL-1) == 0){
        index[0] = ROW-1;
        index[1] = COL-1;
    }
    else {
        int max = -10000;
        for (int row = 0; row < ROW; row++) {
            for (int column = 0; column < COL; column++) {
                if (board.get_cell_color(row, column) == player.get_color() || board.get_orbs_num(row, column) == 0) {
                    int score = 0;
                    int vul = 0;
                    
                    if(row>=0){
                       // board.get_cell_color(row,column)!=player.get_color();
                        if(board.get_cell_color(row-1,column)==-player.get_color() && board.get_orbs_num(row-1, column)==board.get_capacity(row-1,column)-1){
                            score-=5-board.get_capacity(row,column);
                            vul = 1;
                        }
                    }
                    if(row<ROW-1){
                        if(board.get_cell_color(row+1,column)==-player.get_color() && board.get_orbs_num(row+1, column)==board.get_capacity(row+1,column)-1){
                            score-=5-board.get_capacity(row,column);
                            vul = 1;
                        }
                    }
                       
                    
                    if(column>=0){
                        if(board.get_cell_color(row,column-1)==-player.get_color() && board.get_orbs_num(row, column-1)==board.get_capacity(row,column-1)-1){
                            score-=5-board.get_capacity(row,column);
                            vul = 1;
                        }
                    }
                    if(column<COL-1){
                        if(board.get_cell_color(row,column+1)==-player.get_color() && board.get_orbs_num(row, column+1)==board.get_capacity(row,column+1)-1){
                            score-=5-board.get_capacity(row,column);
                            vul = 1;
                        }
                    }
                        
                    
                    if(vul==0){
                        if(board.get_orbs_num(row, column)==2){
                            score+=3;
                        }
                        if(board.get_orbs_num(row, column)==3){
                            score+=2;
                        }
                        if(board.get_orbs_num(row, column)==board.get_capacity(row,column)-1){
                            score+=2;
                        }
                    }
                    int count = 0;
                    for(int i=0;i<ROW;i++){
                        for(int j = 0;j<COL;j++){
                            if(board.get_cell_color(i,j)==player.get_color()){
                                count++;
                            }
                        }
                    }
                    score+=count;
                    
                    my_array arrays = chains(board,player);
                    for(int i=0;i<arrays.pos;i++){
                        if(arrays.array[i]>1){
                            score+=2*arrays.array[i];
                        }
                    }
                    board.place_orb(row, column, &player);
                    for (int i = 0; i < ROW; i++) {
                        for (int j = 0; j < COL; j++) {
                            if (board.get_cell_color(i, j) != player.get_color()) {
                                if ((board.get_capacity(i, j) - board.get_orbs_num(i, j))== 1) {
                                    score -= 2;
                                }
                            }
                        }
                    }
                    board = o_b;
                    if(score>max){
                        max = score;
                        final_x = row;
                        final_y = column;
                    }
                }
            }
        }

        index[0] = final_x;
        index[1] = final_y;
    }
    
}
